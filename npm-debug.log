0 info it worked if it ends with ok
1 verbose cli [ '/Users/greg.parsons/.nvm/versions/node/v5.10.1/bin/node',
1 verbose cli   '/Users/greg.parsons/.nvm/versions/node/v5.10.1/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.8.3
3 info using node@v5.10.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/greg.parsons/projects/Pulls/gulp-load-runners',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/greg.parsons/.npm correctMkdir not in flight; initializing
10 info lifecycle gulp-load-runners@0.1.0~prepublish: gulp-load-runners@0.1.0
11 silly lifecycle gulp-load-runners@0.1.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package.tgz',
12 verbose tar pack   '/Users/greg.parsons/projects/Pulls/gulp-load-runners' ]
13 verbose tarball /Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package.tgz
14 verbose folder /Users/greg.parsons/projects/Pulls/gulp-load-runners
15 verbose addLocalTarball adding from inside cache /Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package.tgz
16 verbose correctMkdir /Users/greg.parsons/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd gulp-load-runners@0.1.0
18 verbose afterAdd /Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/greg.parsons/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package/package.json written
21 silly publish { name: 'gulp-load-runners',
21 silly publish   version: '0.1.0',
21 silly publish   description: 'Helps wrap gulp orchestration and configuration in an easy to follow process',
21 silly publish   main: './dist/index.js',
21 silly publish   homepage: 'https://github.com/gregorskii/gulp-load-runners',
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/gregorskii/gulp-load-runners.git' },
21 silly publish   bugs:
21 silly publish    { url: 'https://github.com/gregorskii/gulp-load-runners/issues',
21 silly publish      email: 'gregorskii@gmail.com' },
21 silly publish   keywords: [ 'gulp', 'orchestrator', 'runner', 'config' ],
21 silly publish   scripts:
21 silly publish    { eslint: 'eslint ./lib',
21 silly publish      clean: 'del ./dist',
21 silly publish      babel: 'babel lib --out-dir ./dist',
21 silly publish      build: 'npm run clean && npm run eslint && npm run babel && npm run docs',
21 silly publish      docs: 'jsdoc -c ./conf.json -d ./docs',
21 silly publish      test: 'mocha --require ./test/helpers/bootstrap.js --compilers js:babel-core/register --reporter spec test' },
21 silly publish   contributors: [ { name: 'Greg Parsons' }, { name: 'Mike Dyer' } ],
21 silly publish   author: { name: 'Greg Parsons', url: 'gregorskii' },
21 silly publish   license: 'MIT',
21 silly publish   dependencies:
21 silly publish    { glob: '^7.0.3',
21 silly publish      'gulp-load-plugins': '^1.2.4',
21 silly publish      'gulp-sequence': '^0.4.5' },
21 silly publish   devDependencies:
21 silly publish    { 'babel-cli': '^6.9.0',
21 silly publish      'babel-eslint': '^6.0.4',
21 silly publish      'babel-preset-es2015': '^6.9.0',
21 silly publish      'babel-register': '^6.9.0',
21 silly publish      chai: '^3.5.0',
21 silly publish      'del-cli': '^0.2.0',
21 silly publish      eslint: '^2.10.2',
21 silly publish      'eslint-config-defaults': '^9.0.0',
21 silly publish      'eslint-plugin-chai-expect': '^1.1.1',
21 silly publish      'eslint-plugin-import': '^1.8.1',
21 silly publish      gulp: '^3.9.1',
21 silly publish      jsdoc: '^3.4.0',
21 silly publish      mocha: '^2.5.3' },
21 silly publish   readme: '## Gulp Load Runners\n\n### Background\n\nThis plugin is created to help users organize and simplify the loading of what we term "runner tasks". These tasks are tasks that orchestrate the running of multiple processes to complete an end goal for a project.\n\nAn example of a runner tasks would be a task called "build" that is expected to run a few common tasks like `clean`, `sass`, `js` and place the output of these tasks into a folder called `dist`. Typically in `gulp` each of these tasks `clean`, `js`, `sass` are created in as single tasks and a composite task called `build` is created to run them together.\n\nThis plugin is similar in nature to the Grunt orchestrator [load-grunt-config](https://github.com/firstandthird/load-grunt-config) which does a bit more than load config.\n\nIn that project an `aliases.yml` file is created to help developers more easily combine common tasks into composite tasks. As Grunt relies heavily on a single config this was a lot easier in a `Grunt` project. The plugin allows a developer to define a single task configuration file in `config` and it would automatically load that file merge its exports into the combined grunt config and register a task that could be run. It would allow for ad-hoc tasks to be created by exporting a function, where it would provide the `grunt` instance to it.\n\nGulp is a bit more complicated as all tasks are ad-hoc, they do not rely on a config to allow `gulp` to run them. This can get cumbersome in a `gulp` project because the implementer is required to manage any common config outside of the core of `gulp`.\n\n`load-grunt-config` handled the complexity of managing config by providing the exports of the tasks config file to the task when it is run. This plugin does the same by allowing a `config` folder to be created which can house the specific config for each plugin defined by the user. With `gulp` however there can be a need to have a global config provided to each task as well. This global config would often hold the output path of all tasks, possible file matching globs, and top level source directories. This plugin allows for a user defined `projectConfig` to be passed through to the tasks as an argument.\n\n### Project Goals\n\nThe primary goal of this project is to orchestrate organization of a `gulp` project but not force any specific paradigms to the user beyond the injection of plugins via `gulp-load-plugins` and the use of `gulp-sequence` (and it providing that to your tasks via the `plugins` param).\n\nIt makes no assumptions about:\n\n* what is contained in your projects config, it puts the onus on you to make sure the config is valid when passed back to your task\n* how and what is being provided to the `projectConfig` argument, it simply provides it back to your tasks when being created\n* what version of `gulp` is being used, it is an argument to the constructor\n\nIt does provide a default version of `gulp-sequence` and `gulp-load-plugins`, where `gulp-sequence` can be overridden over by your `package.json`, but `gulp-load-plugins` cannot, as it is used internally to load the plugins on its own, and your `package.json`.\n\n### Project Setup\n\nA `gulp-load-runners` project would be setup similar to a project using [requireDir](https://github.com/aseemk/requireDir) where the gulp file sits at the root of a project, and a folder is created called `gulp`. This folder is a bit different because it is not just files that have tasks as exports. It has a few added directories/files:\n\n* **tasks**: the tasks folder holds the ad-hoc tasks that would have existed in the `requireDir` base folder\n* **config**: config files that are loaded and passed to the tasks in the tasks folder. These configs do not need a 1-1 mapping with the tasks in the `tasks` folder. The configs are simply loaded, merged, and passed to each task upon initialization through its exported function if it has one\n* **aliases.yml**: the definition of the runner tasks\n\nA typical folder structure may look like this:\n\n```\n./gulp\n├── aliases.yml\n├── config\n│   ├── browserSync.js\n│   ├── clean.js\n│   ├── copy.js\n│   ├── eslint.js\n│   ├── sass.js\n│   ├── watch.js\n│   └── webpack.js\n├── gulp.config.js\n├── tasks\n│   ├── clean.js\n│   ├── copy.js\n│   ├── eslint.js\n│   ├── karma.js\n│   ├── sass.js\n│   ├── watch.js\n│   └── webpack.js\n└\n```\n\nAnd the aliases.yml:\n\n```\ndefault:\n  - \'bundle\'\n\nbundle:\n  - \'clean\'\n  - [\'copy:images\', \'copy:fonts\', \'copy:views\', \'sass\', \'webpack\']\n\nbuild:\n  - \'bundle\'\n\n```\n\nA typical config file would contain:\n\n```\nexport default (projectConfig) => {\n  return {\n    paths: [\n      `${projectConfig.src}/global-styles/**/${projectConfig.extensionGlobs.sass}`\n    ],\n    settings: {\n      outputStyle: \'compressed\',\n      precision: 10\n    },\n    autoprefixer: {\n      browsers: [\'last 2 versions\'],\n      cascade: false\n    },\n    clean: {\n      keepSpecialComments: 0\n    }\n  };\n};\n\n```\n\nWhere `projectConfig` is provided by the config loader in `gulp-load-runners` and is comprised of the `projectConfig` provided at initialization in the `gulpfile.js`.\n\nA typical task would contain:\n\n```\nexport default (gulp, plugins, config) => {\n  gulp.task(\'sass\', () => {\n    gulp.src(config.sass.paths)\n      .pipe(plugins.gif(config.debugPaths, plugins.debug({title: \'FOUND (sass):\'})))\n      .pipe(plugins.sourcemaps.init())\n      .pipe(plugins.sass(config.sass.settings))\n      .pipe(plugins.autoprefixer(config.sass.autoprefixer))\n      .pipe(plugins.gif(process.env.debug, plugins.sourcemaps.write(\'.\')))\n      .pipe(plugins.gif(!process.env.debug, plugins.cleanCss(config.sass.clean)))\n      .pipe(gulp.dest(`${config.dist}/${config.aemModule}/css`))\n      .pipe(plugins.browserSync.stream({reload: true}));\n  });\n};\n```\n\nWhere it was provided `gulp`, `plugins`, and `config` by `gulp-load-runners`.\n\nThe `gulpfile.js` contains:\n\n```\nimport gulp from \'gulp\';\nimport gulpLoadRunners from \'gulp-load-runners\';\nimport projectConfig from \'./gulp/gulp.config\';\n\ngulpLoadRunners(gulp, {\n  gulpLoadPluginsConfig: {\n    DEBUG: false,\n    camelize: true,\n    lazy: true, // Add any other plugins that are not \'gulp-\' but desired\n    // to be loaded in the plugins object\n    pattern: [\n      \'gulp-*\', \'gulp.*\', \'del\', \'browser-sync\', \'vinyl-*\', \'webpack-stream\'\n    ],\n    rename: {\n      \'gulp-if\': \'gif\'\n    }\n  },\n  projectConfig\n});\n\n```\n\nWhere `projectConfig` in this case contains:\n\n```\nimport path from \'path\';\nconst cwd = process.cwd();\n\nconst basePath = cwd;\nconst src = path.join(cwd, \'src\');\nconst dist = path.join(cwd, \'dist\');\nconst bowerRoot = path.join(cwd, \'bower_components\');\nconst nodeRoot = path.join(cwd, \'node_modules\');\n\nconst extensionGlobs = {\n  fonts: \'*.{ttf,woff,eof,svg,woff2,eot}\',\n  images: \'*.{jpg,png,gif,svg}\',\n  videos: \'*.{mp4,mov,ogv,webm}\',\n  sass: \'*.{scss,sass}\',\n  js: \'*.{js,jsx}\',\n  css: \'*.{css}\',\n  svg: \'*.svg\',\n  views: \'*.html\',\n  map: \'*.map\'\n};\n\nmodule.exports = {\n  src,\n  dist,\n  basePath,\n  bowerRoot,\n  nodeRoot,\n  extensionGlobs,\n  debugPaths: false\n};\n\n```\n\nYou can see a working example of the project at this repos [example directory](https://github.com/gregorskii/gulp-load-runners/tree/master/example).\n\n### Aliases\n\nThe aliases file allows one to easily define the runner tasks. The file is setup as YML arrays where the async/sync nature of `gulp-sequence` is preserved in the YML configuration.\n\nFor instance in this example:\n\n```\ndefault:\n  - \'bundle\'\n\nbundle:\n  - \'clean\'\n  - [\'copy:images\', \'copy:fonts\', \'copy:views\', \'sass\', \'webpack\']\n\nbuild:\n  - \'bundle\'\n\n```\n\nThe bundle task will run clean first, then the array group of other tasks.\n\nIn the example configuration above the difference between the `default` task and `build` would be defined by an environment setting. Where `build` would build\nfor production, and `default` would build for local, ignoring things like browserSync which are run using `watch`. As this is all a personal preference this plugin makes\nno assumptions about how you setup your environment configuration or tasks, this is an example of the workflow I use on projects.\n\n### Tasks\n\nTasks are placed in files in `tasks` and expected to be a task with one default export:\n\n```\nexport default (gulp, plugins, config) => {\n  gulp.task(\'example\', () => {\n    console.log(\'Hello!\');\n  });\n};\n```\n\nThe tasks are automatically provided `gulp`, `plugins`, and `config` by this plugin.\n\n### Config\n\nConfig files are placed in the `config` folder and are a module with either a object literal, or function export:\n\n```\nexport default {\n  message: \'Hello World!\'\n};\n```\n\n```\nexport default (projectConfig) => {\n  message: \'Hello World!\'\n};\n```\n\nWhere in the functional example `projectConfig` is provided to the configuration file upon loading.\n\n### Contributing\n\nContributions are welcome as PR\'s. Please discuss any improvements and shortcomings to the plugin in the issues section. I have tried to make it as a transparent to a users process as possible, but discussions on improvement and assumptions made by the plugin are welcome.\n\nTo develop for this plugin please check out the repo, install the deps, and then use the npm config tasks:\n\n* build - will run eslint, unit tests, create jsdocs, and compile the lib folder into dist via Babel\n* test - will run the unit tests\n* docs - will build the jsdocs\n* clean - will delete `dist` using `del-cli`\n* eslint - will run eslint\n* babel - will compile with Babel\n\nExample:\n\n```\nnpm run build\n```\n\nQuick shortcut for build and commit:\n\n```\nnpm run build && git add . && git commit -m "MESSAGE" && git push origin master\n```\n\n### Contributors\n\n* Greg Parsons (https://github.com/gregorskii)\n* Mike Dyer (https://github.com/listenrightmeow)\n\n### License\n\n[MIT](https://opensource.org/licenses/MIT)\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'fadbc3628838bcb79307c5dbd17ccd4a89e370c7',
21 silly publish   _id: 'gulp-load-runners@0.1.0',
21 silly publish   _shasum: '8e3f0bb5a196be2d387df04f57fd28c051aeda1a',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name gulp-load-runners
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'gulp-load-runners',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'gulp-load-runners',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/gulp-load-runners
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/greg.parsons/.npm/gulp-load-runners/0.1.0/package.tgz
30 verbose request uri https://registry.npmjs.org/gulp-load-runners
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 1:52:42 PM
33 verbose request using bearer token for auth
34 verbose request id f43d26e7856cdf6f
35 http request PUT https://registry.npmjs.org/gulp-load-runners
36 http 403 https://registry.npmjs.org/gulp-load-runners
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Tue, 31 May 2016 20:52:43 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-lax1439-LAX',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1464727962.621162,VS0,VE384',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/greg.parsons/.npm/registry.npmjs.org/gulp-load-runners on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 0.1.0." : gulp-load-runners
40 verbose stack     at makeError (/Users/greg.parsons/.nvm/versions/node/v5.10.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/Users/greg.parsons/.nvm/versions/node/v5.10.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/Users/greg.parsons/.nvm/versions/node/v5.10.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/Users/greg.parsons/.nvm/versions/node/v5.10.1/lib/node_modules/npm/node_modules/request/request.js:199:22)
40 verbose stack     at emitTwo (events.js:100:13)
40 verbose stack     at Request.emit (events.js:185:7)
40 verbose stack     at Request.<anonymous> (/Users/greg.parsons/.nvm/versions/node/v5.10.1/lib/node_modules/npm/node_modules/request/request.js:1036:10)
40 verbose stack     at emitOne (events.js:95:20)
40 verbose stack     at Request.emit (events.js:182:7)
40 verbose stack     at IncomingMessage.<anonymous> (/Users/greg.parsons/.nvm/versions/node/v5.10.1/lib/node_modules/npm/node_modules/request/request.js:963:12)
41 verbose statusCode 403
42 verbose pkgid gulp-load-runners
43 verbose cwd /Users/greg.parsons/projects/Pulls/gulp-load-runners
44 error Darwin 14.5.0
45 error argv "/Users/greg.parsons/.nvm/versions/node/v5.10.1/bin/node" "/Users/greg.parsons/.nvm/versions/node/v5.10.1/bin/npm" "publish"
46 error node v5.10.1
47 error npm  v3.8.3
48 error code E403
49 error "You cannot publish over the previously published version 0.1.0." : gulp-load-runners
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
